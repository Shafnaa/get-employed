-- Master Data Definition
CREATE TABLE IF NOT EXISTS status (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE status ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Status." ON status FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Status." ON status FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS company_types (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE company_types ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Company Types." ON company_types FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Company Types." ON company_types FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS companies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3),
    company_type_id SMALLINT REFERENCES company_types NOT NULL
);

ALTER TABLE companies ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Companies." ON companies FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Companies." ON companies FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS document_types (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE document_types ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Document Types." ON document_types FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Document Types." ON document_types FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS countries (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE countries ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Countries." ON countries FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Countries." ON countries FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS cities (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3),
    country_id SMALLINT REFERENCES countries NOT NULL
);

ALTER TABLE cities ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Cities." ON cities FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Cities." ON cities FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS work_types (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE work_types ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Work Types." ON work_types FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Work Types." ON work_types FOR
SELECT TO authenticated USING (TRUE);

CREATE TABLE IF NOT EXISTS experience_levels (
    id SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL CHECK (char_length(name) > 3)
);

ALTER TABLE experience_levels ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Experience Levels." ON experience_levels FOR
INSERT
    TO authenticated
WITH
    CHECK (TRUE);

CREATE POLICY "Individuals can read all Experience Levels." ON experience_levels FOR
SELECT TO authenticated USING (TRUE);

-- Application Data Definition
CREATE TABLE IF NOT EXISTS applications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
    work_type_id SMALLINT REFERENCES work_types NOT NULL,
    city_id BIGINT REFERENCES cities NOT NULL,
    status_id BIGINT REFERENCES status NOT NULL,
    experience_level_id SMALLINT REFERENCES experience_levels NOT NULL,
    title TEXT NOT NULL CHECK (char_length(title) > 3),
    description TEXT NOT NULL CHECK (char_length(description) > 3),
    created_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL,
        updated_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL
);

ALTER TABLE applications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Applications." ON applications FOR
INSERT
    TO authenticated
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can read their Applications." ON applications FOR
SELECT TO authenticated USING (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can update their Applications." ON applications FOR
UPDATE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = user_id
)
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can delete their Applications." ON applications FOR DELETE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = user_id
);

-- Document Data Definition
CREATE TABLE IF NOT EXISTS documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
    document_type_id SMALLINT REFERENCES document_types NOT NULL,
    title TEXT NOT NULL CHECK (char_length(title) > 3),
    document_url TEXT NOT NULL CHECK (char_length(document_url) > 3),
    created_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL,
        updated_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL
);

ALTER TABLE documents ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Documents." ON documents FOR
INSERT
    TO authenticated
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can read their Documents." ON documents FOR
SELECT TO authenticated USING (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can update their Documents." ON documents FOR
UPDATE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = user_id
)
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = user_id
    );

CREATE POLICY "Individuals can delete their Documents." ON documents FOR DELETE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = user_id
);

-- Document Application Data Definition
CREATE TABLE IF NOT EXISTS document_applications (
    application_id BIGINT REFERENCES applications ON DELETE CASCADE NOT NULL,
    document_id BIGINT REFERENCES documents ON DELETE CASCADE NOT NULL,
    PRIMARY KEY (application_id, document_id)
);

ALTER TABLE document_applications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Document Applications." ON document_applications FOR
INSERT
    TO authenticated
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = (
            SELECT user_id
            FROM applications
            WHERE
                id = application_id
        )
    );

CREATE POLICY "Individuals can read their Document Applications." ON document_applications FOR
SELECT TO authenticated USING (
        (
            SELECT auth.uid ()
        ) = (
            SELECT user_id
            FROM applications
            WHERE
                id = application_id
        )
    );

CREATE POLICY "Individuals can delete their Document Applications." ON document_applications FOR DELETE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = (
        SELECT user_id
        FROM applications
        WHERE
            id = application_id
    )
);

-- Todos Data Definition
CREATE TABLE IF NOT EXISTS todos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    application_id BIGINT REFERENCES applications ON DELETE CASCADE NOT NULL,
    title TEXT NOT NULL CHECK (char_length(title) > 3),
    description TEXT NOT NULL CHECK (char_length(description) > 3),
    status BOOLEAN NOT NULL DEFAULT FALSE,
    due_date DATE NOT NULL,
    created_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL,
        updated_at TIMESTAMP
    WITH
        TIME ZONE DEFAULT now() NOT NULL
);

ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Individuals can create new Todos." ON todos FOR
INSERT
    TO authenticated
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = (
            SELECT user_id
            FROM applications
            WHERE
                id = application_id
        )
    );

CREATE POLICY "Individuals can read their Todos." ON todos FOR
SELECT TO authenticated USING (
        (
            SELECT auth.uid ()
        ) = (
            SELECT user_id
            FROM applications
            WHERE
                id = application_id
        )
    );

CREATE POLICY "Individuals can update their Todos." ON todos FOR
UPDATE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = (
        SELECT user_id
        FROM applications
        WHERE
            id = application_id
    )
)
WITH
    CHECK (
        (
            SELECT auth.uid ()
        ) = (
            SELECT user_id
            FROM applications
            WHERE
                id = application_id
        )
    );

CREATE POLICY "Individuals can delete their Todos." ON todos FOR DELETE TO authenticated USING (
    (
        SELECT auth.uid ()
    ) = (
        SELECT user_id
        FROM applications
        WHERE
            id = application_id
    )
);